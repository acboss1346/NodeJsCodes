// ----------------------------------------------------------
// ðŸŸ  EXPRESS.JS FULL NOTES + CRUD EXAMPLE
// ----------------------------------------------------------

// 0. Introduction to Express.js
// Node.js has a built-in http module â†’ powerful but low-level
// Express.js = Fast, minimalist, flexible web framework for Node.js
// Makes building servers & APIs much easier

// ----------------------------------------------------------
// 1. Project Setup
// ----------------------------------------------------------
// npm init -y
// npm install express mysql2
// Create index.js

const express = require('express')   // Import Express
const mysql = require('mysql2')      // Import MySQL library
const app = express()                // Create app instance
const PORT = process.env.PORT || 3000  // Define port

// Middleware
app.use(express.json())                  // Parse JSON bodies
app.use(express.urlencoded({ extended: true })) // Parse URL-encoded bodies

// ----------------------------------------------------------
// 2. Database Connection
// ----------------------------------------------------------
const db = mysql.createConnection({
  host: '127.0.0.1',
  user: 'root',
  password: 'Akshat@1346',
  database: 'babbage_2',
  port: '3306'
})

db.connect(error => {
  if (error) {
    console.log('Some error occurred!', error)
  } else {
    console.log('DB Connected Successfully.')
  }
})

// ----------------------------------------------------------
// 3. Basic Routes & Routing Notes
// ----------------------------------------------------------

// Static route
app.get('/', (req, res) => {
  res.send('Hello from Express!')
})

app.get('/about', (req, res) => {
  res.send('About page')
})

// Dynamic route (route params)
app.get('/users/:id', (req, res) => {
  res.send(`User ID is: ${req.params.id}`)
})

// Query parameters example
app.get('/search', (req, res) => {
  const { term, limit } = req.query
  res.send(`Search Term: ${term}, Limit: ${limit}`)
})

// ----------------------------------------------------------
// 4. CRUD API with MySQL
// ----------------------------------------------------------

// A) Get all users
app.get('/users', (req, res) => {
  const query = 'SELECT * FROM users'
  db.query(query, (error, results) => {
    if (error) res.status(500).json({ message: 'Something went wrong!' })
    else res.status(200).json(results)
  })
})

// B) Get user by ID
app.get('/users/:id', (req, res) => {
  const userId = req.params.id
  const query = 'SELECT * FROM users WHERE id = ?'
  db.query(query, [userId], (error, results) => {
    if (error) res.status(500).json({ message: 'Something went wrong!' })
    else if (results.length === 0) res.status(404).json({ message: 'User not found' })
    else res.status(200).json(results[0])
  })
})

// C) Create a new user
app.post('/users', (req, res) => {
  const { name, email, password } = req.body
  const query = 'INSERT INTO users (name, email, password) VALUES (?, ?, ?)'
  db.query(query, [name, email, password], (error, results) => {
    if (error) res.status(500).json({ message: 'Error creating user', error })
    else res.status(201).json({ message: 'User created', userId: results.insertId })
  })
})

// D) Update user by ID
app.put('/users/:id', (req, res) => {
  const userId = req.params.id
  const { name, email, password } = req.body
  const query = 'UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?'
  db.query(query, [name, email, password, userId], (error, results) => {
    if (error) res.status(500).json({ message: 'Error updating user', error })
    else if (results.affectedRows === 0) res.status(404).json({ message: 'User not found' })
    else res.status(200).json({ message: 'User updated' })
  })
})

// E) Delete user by ID
app.delete('/users/:id', (req, res) => {
  const userId = req.params.id
  const query = 'DELETE FROM users WHERE id = ?'
  db.query(query, [userId], (error, results) => {
    if (error) res.status(500).json({ message: 'Error deleting user', error })
    else if (results.affectedRows === 0) res.status(404).json({ message: 'User not found' })
    else res.status(200).json({ message: 'User deleted' })
  })
})

// ----------------------------------------------------------
// 5. Start Server
// ----------------------------------------------------------
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`)
})

/*
ðŸ“Œ Notes Recap:
- app.get/post/put/delete â†’ HTTP methods for routing
- req.params â†’ route parameters
- req.query â†’ query string parameters
- req.body â†’ POST/PUT data (needs express.json())
- res.send() â†’ send text/html
- res.json() â†’ send JSON
- res.status(code) â†’ set HTTP status
- Status codes: 200 OK, 201 Created, 400 Bad Request, 404 Not Found, 500 Server Error
*/
